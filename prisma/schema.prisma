generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                  String               @id @default(cuid())
  empName             String
  empEmail            String               @unique
  empPhone            String
  empPassword         String
  confirmPassword     String
  empRole             String               @default("employee")
  empTechnology       String
  empProfile          String               @default("")
  empGender           EmpGender
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  activitySnapshots   ActivitySnapshot[]
  idleTimes           AgentIdleTime[]
  workingApps         AgentWorkingApp[]
  leaves              EmpLeave[]
  notifications       Notification[]
  screenshots         Screenshot[]
  timeSheets          TimeSheet[]
  assignedTasks       Task[]               @relation("TaskAssignments")
  hostedMeetings      Meeting[]
  meetingParticipants MeetingParticipant[]
  meetingRecordings   MeetingRecording[]
  meetingEvents       MeetingEvent[]

  @@map("employees")
}

model TimeSheet {
  id                  String               @id @default(cuid())
  clockIn             String               @default("")
  clockOut            String               @default("")
  clockinIP           String               @default("")
  hoursLoggedIn       Int                  @default(0)
  workingFrom         String               @default("office")
  breakStart          String               @default("")
  breakEnd            String               @default("")
  totalBreakTime      Int                  @default(0)
  totalWorkingDays    Int                  @default(0)
  dayPresent          String               @default("0")
  halfDay             Int                  @default(0)
  dayAbsent           String               @default("0")
  holidays            String               @default("0")
  dayLate             String               @default("")
  status              AttendanceStatus     @default(ABSENT)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  empId               String
  employee            Employee             @relation(fields: [empId], references: [id], onDelete: Cascade)
  meetingParticipants MeetingParticipant[]

  @@map("timesheets")
}

model EmpLeave {
  id           String      @id @default(cuid())
  casualLeaves Int         @default(10)
  sickLeave    Int         @default(10)
  otherLeaves  Int         @default(10)
  totalLeave   Int         @default(0)
  leaveType    LeaveType   @default(CASUAL)
  status       LeaveStatus @default(PENDING)
  message      String      @default("")
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  empId        String
  employee     Employee    @relation(fields: [empId], references: [id], onDelete: Cascade)

  @@map("emp_leaves")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empId     String
  employee  Employee @relation(fields: [empId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivitySnapshot {
  id                 String           @id @default(cuid())
  date               DateTime
  totalWorkHours     Int              @default(0)
  totalBreakTime     Int              @default(0)
  netWorkHours       Int              @default(0)
  clockInTime        String           @default("")
  clockOutTime       String           @default("")
  isCurrentlyWorking Boolean          @default(false)
  isOnBreak          Boolean          @default(false)
  breakSessions      Json[]
  attendanceStatus   AttendanceStatus @default(ABSENT)
  workingFrom        WorkingLocation  @default(OFFICE)
  lastActivity       String           @default("")
  isActive           Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  empId              String
  employee           Employee         @relation(fields: [empId], references: [id], onDelete: Cascade)

  @@unique([empId, date])
  @@map("activity_snapshots")
}

model Task {
  id                String     @id @default(cuid())
  title             String
  description       String
  status            TaskStatus @default(PENDING)
  dueDate           DateTime
  isActive          Boolean    @default(true)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  assignedEmployees Employee[] @relation("TaskAssignments")

  @@map("tasks")
}

model Screenshot {
  id        String   @id @default(cuid())
  imageUrl  String
  publicId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empId     String
  employee  Employee @relation(fields: [empId], references: [id], onDelete: Cascade)

  @@map("screenshots")
}

model AgentWorkingApp {
  id          String   @id @default(cuid())
  appName     String
  appPath     String?
  appOpenAt   DateTime
  appCloseAt  DateTime
  keysPressed Int      @default(0)
  mouseClicks Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  empId       String
  employee    Employee @relation(fields: [empId], references: [id], onDelete: Cascade)

  @@map("agent_working_apps")
}

model AgentIdleTime {
  id        String   @id @default(cuid())
  from      DateTime
  to        DateTime
  duration  Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empId     String
  employee  Employee @relation(fields: [empId], references: [id], onDelete: Cascade)

  @@map("agent_idle_times")
}

model Meeting {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  type           MeetingType   @default(BASIC)
  hostId         String
  host           Employee      @relation(fields: [hostId], references: [id])
  roomCode       String        @unique
  passwordHash   String?
  status         MeetingStatus @default(SCHEDULED)
  scheduledStart DateTime?
  scheduledEnd   DateTime?
  actualStart    DateTime?
  actualEnd      DateTime?
  isPersistent   Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  participants MeetingParticipant[]
  recordings   MeetingRecording[]
  events       MeetingEvent[]

  @@index([hostId])
  @@index([status])
  @@index([scheduledStart])
  @@map("meetings")
}

model MeetingParticipant {
  id            String      @id @default(cuid())
  meetingId     String
  meeting       Meeting     @relation(fields: [meetingId], references: [id])
  empId         String
  employee      Employee    @relation(fields: [empId], references: [id])
  role          MeetingRole @default(PARTICIPANT)
  joinedAt      DateTime?
  leftAt        DateTime?
  attendanceSec Int         @default(0)
  isBanned      Boolean     @default(false)

  // Optional link to the employee's timesheet for that day
  timeSheetId String?
  timeSheet   TimeSheet? @relation(fields: [timeSheetId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([meetingId, empId])
  @@index([empId, joinedAt])
  @@map("meeting_participants")
}

model MeetingRecording {
  id            String    @id @default(cuid())
  meetingId     String
  meeting       Meeting   @relation(fields: [meetingId], references: [id])
  startedAt     DateTime
  endedAt       DateTime?
  cloudinaryUrl String?
  publicId      String?
  bytes         Int?
  format        String?
  createdById   String?
  createdBy     Employee? @relation(fields: [createdById], references: [id])
  createdAt     DateTime  @default(now())

  @@index([meetingId])
  @@index([createdById])
  @@map("meeting_recordings")
}

model MeetingEvent {
  id        String    @id @default(cuid())
  meetingId String
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
  empId     String?
  employee  Employee? @relation(fields: [empId], references: [id])
  type      String
  at        DateTime  @default(now())
  data      Json?

  @@index([meetingId, at])
  @@map("meeting_events")
}

enum EmpGender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALFDAY
  LATE
}

enum LeaveType {
  CASUAL
  SICK
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVE
  REJECT
}

enum WorkingLocation {
  OFFICE
  REMOTE
  HYBRID
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum MeetingType {
  BASIC
  NORMAL
  LONG
}

enum MeetingStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELED
}

enum MeetingRole {
  HOST
  COHOST
  PARTICIPANT
}
